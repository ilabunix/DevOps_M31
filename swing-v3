//@version=5
strategy("EMAX_SwingTrend v1", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// === INPUTS ===
mode         = input.string("Intraday", "Mode", options=["Intraday", "Scalping"])
trailType    = input.string("modified", "Trail Type", options=["modified", "unmodified"])
ATRPeriod    = input.int(28, "ATR Period")
ATRFactor    = input.float(5.0, "ATR Factor")

// Intraday TP/SL (ATR Based)
useTPSL      = input.bool(true, "Use TP/SL (Intraday Mode)?")
tpMult       = input.float(2.0, "TP ATR Multiplier")
slMult       = input.float(1.0, "SL ATR Multiplier")

// Scalping TP/SL (Tick Based)
tickValue    = input.float(0.25, "Tick Size (e.g. 0.25 for NQ)")
scalpTP      = input.int(20, "Scalping Take Profit (ticks)")
scalpSL      = input.int(10, "Scalping Stop Loss (ticks)")

// === PRICE + RANGE ===
norm_h = high
norm_l = low
norm_c = close

HiLo = math.min(norm_h - norm_l, 1.5 * ta.sma(norm_h - norm_l, ATRPeriod))
HRef = norm_l <= norm_h[1] ? norm_h - norm_c[1] : (norm_h - norm_c[1]) - 0.5 * (norm_l - norm_h[1])
LRef = norm_h >= norm_l[1] ? norm_c[1] - norm_l : (norm_c[1] - norm_l) - 0.5 * (norm_l[1] - norm_h)
trueRange = (trailType == "modified") 
    ? math.max(HiLo, HRef, LRef) 
    : math.max(norm_h - norm_l, math.abs(norm_h - norm_c[1]), math.abs(norm_l - norm_c[1]))

wildMa(src, len) =>
    var float wild = na
    wild := na(wild[1]) ? src : wild[1] + (src - wild[1]) / len

loss = ATRFactor * wildMa(trueRange, ATRPeriod)

// === TREND LOGIC ===
Up = norm_c - loss
Dn = norm_c + loss

var float TrendUp = na
var float TrendDown = na
var int Trend = 1

TrendUp   := norm_c[1] > TrendUp[1]   ? math.max(Up, TrendUp[1])   : Up
TrendDown := norm_c[1] < TrendDown[1] ? math.min(Dn, TrendDown[1]) : Dn
Trend := norm_c > TrendDown[1] ? 1 : norm_c < TrendUp[1] ? -1 : nz(Trend[1], 1)
trail = Trend == 1 ? TrendUp : TrendDown

// === EXTREMUM + SIGNALS ===
var float ex = na
ex := ta.crossover(Trend, 0) ? norm_h :
      ta.crossunder(Trend, 0) ? norm_l :
      Trend == 1 ? math.max(ex[1], norm_h) :
      Trend == -1 ? math.min(ex[1], norm_l) : ex[1]

longFlip  = ta.crossover(Trend, 0)
shortFlip = ta.crossunder(Trend, 0)
atr = ta.sma(trueRange, 14)

// === FIB ZONE LEVELS ===
fib1 = 61.8
fib2 = 78.6
fib3 = 88.6
f1 = ex + (trail - ex) * fib1 / 100
f2 = ex + (trail - ex) * fib2 / 100
f3 = ex + (trail - ex) * fib3 / 100
l100 = trail + 0
state = Trend == 1 ? "long" : "short"

Fib1 = plot(f1, "Fib 1", style=plot.style_line, color=color.black)
Fib2 = plot(f2, "Fib 2", style=plot.style_line, color=color.black)
Fib3 = plot(f3, "Fib 3", style=plot.style_line, color=color.black)
L100 = plot(l100, "l100", style=plot.style_line, color=color.black)
fill(Fib1, Fib2, color = state == "long" ? color.green : color.red)
fill(Fib2, Fib3, color = state == "long" ? color.new(color.green, 80) : color.new(color.red, 80))
fill(Fib3, L100, color = state == "long" ? color.new(color.green, 90) : color.new(color.red, 90))

// === STRATEGY EXECUTION ===
isScalp = mode == "Scalping"
isIntra = mode == "Intraday"

// Tick conversion
tpScalpPts = scalpTP * tickValue
slScalpPts = scalpSL * tickValue

if longFlip
    strategy.entry("Long", strategy.long)
    if isScalp
        strategy.exit("Scalp Long", from_entry="Long", limit=close + tpScalpPts, stop=close - slScalpPts)
    if isIntra and useTPSL
        strategy.exit("TP/SL Long", from_entry="Long", limit=close + tpMult * atr, stop=close - slMult * atr)

if shortFlip
    strategy.entry("Short", strategy.short)
    if isScalp
        strategy.exit("Scalp Short", from_entry="Short", limit=close - tpScalpPts, stop=close + slScalpPts)
    if isIntra and useTPSL
        strategy.exit("TP/SL Short", from_entry="Short", limit=close - tpMult * atr, stop=close + slMult * atr)

if isIntra and not useTPSL
    if Trend == -1
        strategy.close("Long")
    if Trend == 1
        strategy.close("Short")

// === VISUALS ===
plot(trail, title="Trailing Stop", color=Trend == 1 ? color.green : color.red, linewidth=2)
plot(ex, title="Extremum", color=Trend == 1 ? color.lime : color.fuchsia, style=plot.style_circles)
plotshape(longFlip, title="Long Entry", location=location.belowbar, color=color.green, style=shape.arrowup, size=size.small)
plotshape(shortFlip, title="Short Entry", location=location.abovebar, color=color.red, style=shape.arrowdown, size=size.small)

// === DASHBOARD ===
var table dash = table.new(position.top_right, 4, 5, border_width=1)
table.cell(dash, 0, 0, "EMAX_SwingTrend", text_color=color.white, bgcolor=color.gray)
table.cell(dash, 0, 1, "Trend", text_color=color.white, bgcolor=color.new(color.gray, 80))
table.cell(dash, 1, 1, Trend == 1 ? "LONG" : "SHORT", text_color=color.white, bgcolor=Trend == 1 ? color.green : color.red)
lastSignal = longFlip ? "Buy" : shortFlip ? "Sell" : "â€”"
table.cell(dash, 2, 1, "Signal", text_color=color.white, bgcolor=color.new(color.gray, 80))
table.cell(dash, 3, 1, lastSignal, text_color=color.white, bgcolor=color.new(color.blue, 70))
table.cell(dash, 0, 2, "Position", text_color=color.white, bgcolor=color.new(color.gray, 80))
table.cell(dash, 1, 2, strategy.position_size > 0 ? "Long" : strategy.position_size < 0 ? "Short" : "Flat", text_color=color.white, bgcolor=color.new(color.gray, 60))
table.cell(dash, 2, 2, "Open PnL", text_color=color.white, bgcolor=color.new(color.gray, 80))
table.cell(dash, 3, 2, str.tostring(strategy.openprofit, format.mintick), text_color=color.white, bgcolor=color.new(color.gray, 60))
table.cell(dash, 0, 3, "Avg Entry", text_color=color.white, bgcolor=color.new(color.gray, 80))
table.cell(dash, 1, 3, str.tostring(strategy.position_avg_price, format.mintick), text_color=color.white, bgcolor=color.new(color.gray, 60))