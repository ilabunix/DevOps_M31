rule {
  name      = "Lambda Throttles - ${var.lambda_name}"
  condition = "C"

  data {
    ref_id = "A"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = var.cloudwatch_data_source_uid
    model = jsonencode({
      ref_id      = "A"
      datasource  = { type = "cloudwatch", uid = var.cloudwatch_data_source_uid }
      region      = var.aws_region
      namespace   = "AWS/Lambda"
      metricName  = "Throttles"
      dimensions  = { FunctionName = var.lambda_name }
      statistics  = ["Sum"]
      period      = "300"
      type        = "timeseries"
      intervalMs  = 1000
      maxDataPoints = 43200
    })
  }

  data {
    ref_id = "B"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      ref_id      = "B"
      expression  = "A"
      type        = "reduce"
      reducer     = "last"
      datasource  = { type = "__expr__", uid = "__expr__" }
      intervalMs  = 1000
      maxDataPoints = 43200
    })
  }

  data {
    ref_id = "C"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      ref_id      = "C"
      expression  = "B"
      type        = "threshold"
      conditions  = [{
        evaluator = { type = "gt", params = [0] }
        operator  = { type = "and" }
        reducer   = { type = "last", params = [] }
        query     = { ref_id = "B", type = "reduce" }
      }]
    })
  }

  no_data_state  = "OK"
  exec_err_state = "Alerting"
  annotations = {
    summary = "Lambda ${var.lambda_name} is experiencing throttles."
  }
  labels = {
    severity = "critical"
    env      = var.deploy_env
  }
}

rule {
  name      = "Lambda Duration - ${var.lambda_name}"
  condition = "C"

  data {
    ref_id = "A"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = var.cloudwatch_data_source_uid
    model = jsonencode({
      ref_id      = "A"
      datasource  = { type = "cloudwatch", uid = var.cloudwatch_data_source_uid }
      region      = var.aws_region
      namespace   = "AWS/Lambda"
      metricName  = "Duration"
      dimensions  = { FunctionName = var.lambda_name }
      statistics  = ["Average"]
      period      = "300"
      type        = "timeseries"
      intervalMs  = 1000
      maxDataPoints = 43200
    })
  }

  data {
    ref_id = "B"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      ref_id      = "B"
      expression  = "A"
      type        = "reduce"
      reducer     = "last"
      datasource  = { type = "__expr__", uid = "__expr__" }
      intervalMs  = 1000
      maxDataPoints = 43200
    })
  }

  data {
    ref_id = "C"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      ref_id      = "C"
      expression  = "B"
      type        = "threshold"
      conditions  = [{
        evaluator = { type = "gt", params = [var.lambda_duration_threshold] }
        operator  = { type = "and" }
        reducer   = { type = "last", params = [] }
        query     = { ref_id = "B", type = "reduce" }
      }]
    })
  }

  no_data_state  = "OK"
  exec_err_state = "Alerting"
  annotations = {
    summary = "Lambda ${var.lambda_name} average duration is high."
  }
  labels = {
    severity = "critical"
    env      = var.deploy_env
  }
}

rule {
  name      = "Lambda Invocations - ${var.lambda_name}"
  condition = "C"

  data {
    ref_id = "A"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = var.cloudwatch_data_source_uid
    model = jsonencode({
      ref_id      = "A"
      datasource  = { type = "cloudwatch", uid = var.cloudwatch_data_source_uid }
      region      = var.aws_region
      namespace   = "AWS/Lambda"
      metricName  = "Invocations"
      dimensions  = { FunctionName = var.lambda_name }
      statistics  = ["Sum"]
      period      = "300"
      type        = "timeseries"
      intervalMs  = 1000
      maxDataPoints = 43200
    })
  }

  data {
    ref_id = "B"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      ref_id      = "B"
      expression  = "A"
      type        = "reduce"
      reducer     = "last"
      datasource  = { type = "__expr__", uid = "__expr__" }
      intervalMs  = 1000
      maxDataPoints = 43200
    })
  }

  data {
    ref_id = "C"
    relative_time_range {
      from = 300
      to   = 0
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      ref_id      = "C"
      expression  = "B"
      type        = "threshold"
      conditions  = [{
        evaluator = { type = "gt", params = [var.lambda_invocation_threshold] }
        operator  = { type = "and" }
        reducer   = { type = "last", params = [] }
        query     = { ref_id = "B", type = "reduce" }
      }]
    })
  }

  no_data_state  = "OK"
  exec_err_state = "Alerting"
  annotations = {
    summary = "Spike in Lambda ${var.lambda_name} invocations."
  }
  labels = {
    severity = "critical"
    env      = var.deploy_env
  }
}
