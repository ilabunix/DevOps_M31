rule {
  name      = "Lambda Throttles - ${var.lambda_name}"
  condition = "C"

  data {
    ref_id             = "A"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = var.cloudwatch_data_source_uid
    model = jsonencode({
      region       = var.aws_region
      namespace    = "AWS/Lambda"
      metricName   = "Throttles"
      dimensions   = { FunctionName = var.lambda_name }
      statistic    = "Sum"
      period       = 300
    })
  }

  data {
    ref_id = "B"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      expression     = "A"
      type           = "reduce"
      reducer        = "last"
    })
  }

  data {
    ref_id = "C"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      conditions = [
        {
          evaluator = {
            type  = "gt"
            params = [0]
          }
          operator = { type = "and" }
          query    = "B"
          reducer  = { type = "last" }
          type     = "query"
        }
      ]
    })
  }

  no_data_state   = "OK"
  exec_err_state  = "Alerting"
  labels = {
    severity = "critical"
    email    = var.deploy_env
  }
  annotations = {
    summary = "Lambda ${var.lambda_name} is being throttled."
  }
}

rule {
  name      = "Lambda Duration - ${var.lambda_name}"
  condition = "C"

  data {
    ref_id             = "A"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = var.cloudwatch_data_source_uid
    model = jsonencode({
      region       = var.aws_region
      namespace    = "AWS/Lambda"
      metricName   = "Duration"
      dimensions   = { FunctionName = var.lambda_name }
      statistic    = "Average"
      period       = 300
    })
  }

  data {
    ref_id = "B"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      expression     = "A"
      type           = "reduce"
      reducer        = "last"
    })
  }

  data {
    ref_id = "C"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      conditions = [
        {
          evaluator = {
            type  = "gt"
            params = [var.duration_threshold]
          }
          operator = { type = "and" }
          query    = "B"
          reducer  = { type = "last" }
          type     = "query"
        }
      ]
    })
  }

  no_data_state   = "OK"
  exec_err_state  = "Alerting"
  labels = {
    severity = "critical"
    email    = var.deploy_env
  }
  annotations = {
    summary = "Lambda ${var.lambda_name} average duration is high."
  }
}

rule {
  name      = "Lambda Invocations - ${var.lambda_name}"
  condition = "C"

  data {
    ref_id             = "A"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = var.cloudwatch_data_source_uid
    model = jsonencode({
      region       = var.aws_region
      namespace    = "AWS/Lambda"
      metricName   = "Invocations"
      dimensions   = { FunctionName = var.lambda_name }
      statistic    = "Sum"
      period       = 300
    })
  }

  data {
    ref_id = "B"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      expression     = "A"
      type           = "reduce"
      reducer        = "last"
    })
  }

  data {
    ref_id = "C"
    relative_time_range {
      from = 0
      to   = 300
    }
    datasource_uid = "__expr__"
    model = jsonencode({
      conditions = [
        {
          evaluator = {
            type  = "gt"
            params = [var.invocation_threshold]
          }
          operator = { type = "and" }
          query    = "B"
          reducer  = { type = "last" }
          type     = "query"
        }
      ]
    })
  }

  no_data_state   = "OK"
  exec_err_state  = "Alerting"
  labels = {
    severity = "critical"
    email    = var.deploy_env
  }
  annotations = {
    summary = "Spike in Lambda ${var.lambda_name} invocations."
  }
}
