//@version=5
strategy("SwingArm Auto Strategy v5", overlay = true, default_qty_type = strategy.percent_of_equity, default_qty_value = 10)

// === INPUTS ===
trailType        = input.string("modified", "Trail Type", options = ["modified", "unmodified"])
ATRPeriod        = input.int(28, "ATR Period")
ATRFactor        = input.float(5.0, "ATR Factor")
useFib2          = input.bool(true, "Use Fib 2 for Entry?")
useFib3          = input.bool(true, "Use Fib 3 for Entry?")
useTP_SL         = input.bool(false, "Use TP/SL?")
tpMult           = input.float(2.0, "TP ATR Multiplier")
slMult           = input.float(1.0, "SL ATR Multiplier")

// === BASIC DATA ===
norm_o = open
norm_h = high
norm_l = low
norm_c = close

// === WILDER MA + TRUE RANGE ===
wildMa(src, len) =>
    var float wild = na
    wild := na(wild[1]) ? src : wild[1] + (src - wild[1]) / len

HiLo = math.min(norm_h - norm_l, 1.5 * ta.sma(norm_h - norm_l, ATRPeriod))
HRef = norm_l <= norm_h[1] ? norm_h - norm_c[1] : (norm_h - norm_c[1]) - 0.5 * (norm_l - norm_h[1])
LRef = norm_h >= norm_l[1] ? norm_c[1] - norm_l : (norm_c[1] - norm_l) - 0.5 * (norm_l[1] - norm_h)

trueRange = trailType == "modified" ? math.max(HiLo, HRef, LRef) :
    math.max(norm_h - norm_l, math.abs(norm_h - norm_c[1]), math.abs(norm_l - norm_c[1]))

loss = ATRFactor * wildMa(trueRange, ATRPeriod)

Up = norm_c - loss
Dn = norm_c + loss

var float TrendUp = na
var float TrendDown = na
var int Trend = 1

TrendUp := norm_c[1] > TrendUp[1] ? math.max(Up, TrendUp[1]) : Up
TrendDown := norm_c[1] < TrendDown[1] ? math.min(Dn, TrendDown[1]) : Dn

Trend := norm_c > TrendDown[1] ? 1 : norm_c < TrendUp[1] ? -1 : nz(Trend[1], 1)
trail = Trend == 1 ? TrendUp : TrendDown

var float ex = na
ex := ta.crossover(Trend, 0) ? norm_h :
      ta.crossunder(Trend, 0) ? norm_l :
      Trend == 1 ? math.max(ex[1], norm_h) :
      Trend == -1 ? math.min(ex[1], norm_l) : ex[1]

// === FIB LEVELS ===
fib1Level = 61.8
fib2Level = 78.6
fib3Level = 88.6

f1 = ex + (trail - ex) * fib1Level / 100
f2 = ex + (trail - ex) * fib2Level / 100
f3 = ex + (trail - ex) * fib3Level / 100

state = Trend == 1 ? "long" : "short"

l1 = state[1] == "long" and ta.crossunder(norm_c, f1[1])
l2 = state[1] == "long" and ta.crossunder(norm_c, f2[1])
l3 = state[1] == "long" and ta.crossunder(norm_c, f3[1])
s1 = state[1] == "short" and ta.crossover(norm_c, f1[1])
s2 = state[1] == "short" and ta.crossover(norm_c, f2[1])
s3 = state[1] == "short" and ta.crossover(norm_c, f3[1])

atr = ta.sma(trueRange, 14)

// === ENTRY CONDITIONS ===
longEntry = Trend == 1 and (l1 or (useFib2 and l2) or (useFib3 and l3))
shortEntry = Trend == -1 and (s1 or (useFib2 and s2) or (useFib3 and s3))

// === EXIT CONDITIONS ===
exitLong = Trend == -1
exitShort = Trend == 1

// === STRATEGY EXECUTION ===
if (longEntry and strategy.position_size <= 0)
    if useTP_SL
        strategy.entry("Long", strategy.long)
        strategy.exit("TP/SL Long", from_entry="Long", limit=close + tpMult * atr, stop=close - slMult * atr)
    else
        strategy.entry("Long", strategy.long)

if (shortEntry and strategy.position_size >= 0)
    if useTP_SL
        strategy.entry("Short", strategy.short)
        strategy.exit("TP/SL Short", from_entry="Short", limit=close - tpMult * atr, stop=close + slMult * atr)
    else
        strategy.entry("Short", strategy.short)

if exitLong
    strategy.close("Long")
if exitShort
    strategy.close("Short")

// === DASHBOARD ===
var table dash = table.new(position.top_right, 4, 5, border_width = 1)

if bar_index % 5 == 0
    table.cell(dash, 0, 0, "SwingArm v5", text_color=color.white, bgcolor=color.gray, colspan=4)
    table.cell(dash, 0, 1, "Trend", text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(dash, 1, 1, Trend == 1 ? "LONG" : "SHORT", text_color=color.white, bgcolor=Trend == 1 ? color.green : color.red)

    lastSignal = longEntry ? "Buy" : shortEntry ? "Sell" : "â€”"
    table.cell(dash, 2, 1, "Signal", text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(dash, 3, 1, lastSignal, text_color=color.white, bgcolor=color.new(color.blue, 70))

    table.cell(dash, 0, 2, "Position", text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(dash, 1, 2, strategy.position_size > 0 ? "Long" : strategy.position_size < 0 ? "Short" : "Flat", text_color=color.white, bgcolor=color.new(color.gray, 60))

    table.cell(dash, 2, 2, "Open PnL", text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(dash, 3, 2, str.tostring(strategy.openprofit, format.mintick), text_color=color.white, bgcolor=color.new(color.gray, 60))

    table.cell(dash, 0, 3, "Net Profit", text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(dash, 1, 3, str.tostring(strategy.netprofit, format.mintick), text_color=color.white, bgcolor=color.new(color.gray, 60))

    table.cell(dash, 2, 3, "Trades", text_color=color.white, bgcolor=color.new(color.gray, 80))
    table.cell(dash, 3, 3, str.tostring(strategy.closedtrades), text_color=color.white, bgcolor=color.new(color.gray, 60))